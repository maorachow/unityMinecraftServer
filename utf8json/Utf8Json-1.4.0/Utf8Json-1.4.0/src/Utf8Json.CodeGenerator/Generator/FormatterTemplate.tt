<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

namespace <#= Namespace #>
{
    using System;
    using Utf8Json;

<# foreach(var objInfo in objectSerializationInfos) { #>

    public sealed class <#= objInfo.Name #>Formatter : global::Utf8Json.IJsonFormatter<<#= objInfo.FullName #>>
    {
        readonly global::Utf8Json.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public <#= objInfo.Name #>Formatter()
        {
            this.____keyMapping = new global::Utf8Json.Internal.AutomataDictionary()
            {
<# var index = 0; foreach(var x in objInfo.Members) { #>
                { JsonWriter.GetEncodedPropertyNameWithoutQuotation("<#= x.Name #>"), <#= index++ #>},
<# } #>
            };

            this.____stringByteKeys = new byte[][]
            {
<# index = 0; foreach(var x in objInfo.Members.Where(x => x.IsReadable)) { #>
<# if(index++ == 0) { #>
                JsonWriter.GetEncodedPropertyNameWithBeginObject("<#= x.Name #>"),
<# } else { #>
                JsonWriter.GetEncodedPropertyNameWithPrefixValueSeparator("<#= x.Name #>"),
<# }} #>                
            };
        }

        public void Serialize(ref JsonWriter writer, <#= objInfo.FullName #> value, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
<# if( objInfo.IsClass) { #>
            if (value == null)
            {
                writer.WriteNull();
                return;
            }
<# } #>            

<# index = 0; foreach(var x in objInfo.Members.Where(x=>x.IsReadable)) { #>
            writer.WriteRaw(this.____stringByteKeys[<#= index++ #>]);
            <#= x.GetSerializeMethodString() #>;
<# } #>
            
            writer.WriteEndObject();
        }

        public <#= objInfo.FullName #> Deserialize(ref JsonReader reader, global::Utf8Json.IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
<# if( objInfo.IsClass) { #>
                return null;
<# } else { #>
                throw new InvalidOperationException("typecode is null, struct not supported");
<# } #>
            }
            
<# if( !objInfo.HasConstructor) { #>            
	        throw new InvalidOperationException("generated serializer for IInterface does not support deserialize.");
<# } else { #>

<# foreach(var x in objInfo.Members) { #>
            var __<#= x.MemberName #>__ = default(<#= x.Type #>);
            var __<#= x.MemberName #>__b__ = false;
<# } #>

            var ____count = 0;
            reader.ReadIsBeginObjectWithVerify();
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref ____count))
            {
                var stringKey = reader.ReadPropertyNameSegmentRaw();
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    reader.ReadNextBlock();
                    goto NEXT_LOOP;
                }

                switch (key)
                {
<# index = 0; foreach(var x in objInfo.Members) { #>
                    case <#= index++ #>:
                        __<#= x.MemberName #>__ = <#= x.GetDeserializeMethodString() #>;
                        __<#= x.MemberName #>__b__ = true;
                        break;
<# } #>
                    default:
                        reader.ReadNextBlock();
                        break;
                }

                NEXT_LOOP:
                continue;
            }

            var ____result = new <#= objInfo.GetConstructorString()  #>;
<# foreach(var x in objInfo.Members.Where(x => x.IsWritable)) { #>
            if(__<#= x.MemberName #>__b__) ____result.<#= x.MemberName #> = __<#= x.MemberName #>__;
<# } #>

            return ____result;
<# } #>
        }
    }

<# } #>
}

#pragma warning disable 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612